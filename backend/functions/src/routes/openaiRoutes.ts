import axios, { AxiosError } from "axios";
import { onRequest } from "firebase-functions/v2/https";
import * as dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Get OpenAI API key from environment
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  throw new Error("OPENAI_API_KEY is not set in environment variables");
}

/**
 * Sanitize text by removing HTML tags.
 * @param {string} text - The text to sanitize.
 * @return {string} - Sanitized text.
 */
function sanitizeText(text: string): string {
  if (!text) return "";
  return text.replace(/<[^>]*>?/gm, "");
}

// Homepage update function with CORS support
// Define the handler function separately
const updateHomepageHandler = async (req: any, res: any) => {
  // Set response headers
  res.set('Content-Type', 'application/json');
  
  // Handle preflight requests
  if (req.method === "OPTIONS") {
    res.status(204).send();
    return;
  }

  // Log request info for debugging
  console.log("Request received:", {
    method: req.method,
    path: req.path,
    body: req.body
  });

  try {
    // Validate request
    const { prompt } = req.body || {};
    if (!prompt) {
      res.status(400).json({ error: "Prompt is required in the request body" });
      return;
    }

    // Call OpenAI API
    const openAIResponse = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that updates website homepage content."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        tools: [
          {
            type: "function",
            function: {
              name: "update_homepage",
              strict: false,
              parameters: {
                type: "object",
                required: ["updateText"],
                properties: {
                  updateText: {
                    type: "string",
                    description: "The text to update the homepage with.",
                  },
                },
              },
              description: "Updates the homepage with the provided text.",
            },
          },
        ],
        temperature: 1,
        max_tokens: 2048,
      },
      {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        },
      }
    );

    // Process OpenAI response
    const toolCall = openAIResponse.data.choices?.[0]?.message?.tool_calls?.[0];

    if (toolCall?.function?.name === "update_homepage") {
      if (!toolCall.function.arguments) {
        throw new Error("Function arguments are undefined");
      }
      
      const { updateText } = JSON.parse(toolCall.function.arguments);
      const sanitizedText = sanitizeText(updateText);

      // Update Drupal
      const drupalResponse = await axios.post(
        "https://drupal7.intelligensi.online/api/update-homepage",
        { update_text: sanitizedText },
        { 
          headers: { 
            "Content-Type": "application/json" 
          } 
        }
      );

      res.status(200).json({
        message: "Homepage updated successfully",
        generatedText: sanitizedText,
        drupalResponse: drupalResponse.data,
      });
    } else {
      // If no tool call, return the assistant's message
      const message = openAIResponse.data.choices?.[0]?.message?.content ||
        "No content generated by the AI model.";
      res.status(200).json({ message });
    }
  } catch (error) {
    console.error("Error in update process:", error);
    
    // Handle different error types
    const statusCode = error instanceof AxiosError && error.response?.status || 500;
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    const errorDetails = error instanceof AxiosError ? error.response?.data : undefined;
    
    const errorResponse = {
      error: "Failed to process your request",
      message: errorMessage,
      ...(errorDetails && { details: errorDetails })
    };
    
    res.status(statusCode).json(errorResponse);
  }
};

// Export the wrapped function
export const updateHomepage = onRequest(
  { cors: true },
  updateHomepageHandler
);